/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/graph/GraphWrapAndClear.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/canvas/Line.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void SendButtonHandle()
    {
        // Override and implement this function in Screen1
    }

    virtual void ASNHandle()
    {
        // Override and implement this function in Screen1
    }

    virtual void TimDivHandle()
    {
        // Override and implement this function in Screen1
    }

    virtual void TimDivResetHandle()
    {
        // Override and implement this function in Screen1
    }

    virtual void TimDivRightHandle()
    {
        // Override and implement this function in Screen1
    }

    virtual void TimDivLeftHande()
    {
        // Override and implement this function in Screen1
    }

    virtual void TimDivDownHande()
    {
        // Override and implement this function in Screen1
    }

    virtual void TimDivUpHandle()
    {
        // Override and implement this function in Screen1
    }

    virtual void TimDivSliderHandle(int value)
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::GraphWrapAndClear<180> dynamicGraph1;
    touchgfx::GraphElementLine dynamicGraph1Line1;
    touchgfx::PainterRGB565 dynamicGraph1Line1Painter;
    touchgfx::GraphElementGridX dynamicGraph1MajorXAxisGrid;
    touchgfx::GraphElementGridY dynamicGraph1MajorYAxisGrid;
    touchgfx::Container SettingCont;
    touchgfx::ButtonWithIcon SendButton;
    touchgfx::TextAreaWithOneWildcard SampleRateText;
    touchgfx::ButtonWithIcon TimDivButton;
    touchgfx::TextAreaWithOneWildcard TimedivText;
    touchgfx::WildcardTextButtonStyle< touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger > > asnButton;
    touchgfx::TextAreaWithOneWildcard TimDivOffset;
    touchgfx::Image OffsetArrow;
    touchgfx::Container TimDivCont;
    touchgfx::ButtonWithIcon TimDivUp;
    touchgfx::ButtonWithIcon TimDivDown;
    touchgfx::ButtonWithIcon TimDivLeft;
    touchgfx::ButtonWithIcon TimDivRight;
    touchgfx::ButtonWithIcon TimDivReset;
    touchgfx::Slider TimDivSlider;
    touchgfx::Line line1;
    touchgfx::PainterRGB565 line1Painter;

    /*
     * Wildcard Buffers
     */
    static const uint16_t SAMPLERATETEXT_SIZE = 4;
    touchgfx::Unicode::UnicodeChar SampleRateTextBuffer[SAMPLERATETEXT_SIZE];
    static const uint16_t TIMEDIVTEXT_SIZE = 5;
    touchgfx::Unicode::UnicodeChar TimedivTextBuffer[TIMEDIVTEXT_SIZE];
    static const uint16_t TIMDIVOFFSET_SIZE = 13;
    touchgfx::Unicode::UnicodeChar TimDivOffsetBuffer[TIMDIVOFFSET_SIZE];
    static const uint16_t ASNBUTTON_SIZE = 2;
    touchgfx::Unicode::UnicodeChar asnButtonBuffer[ASNBUTTON_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<Screen1ViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 4800;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // SCREEN1VIEWBASE_HPP
